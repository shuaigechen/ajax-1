{"version":3,"sources":["main.js"],"names":["n","getPAGE","onclick","request","XMLHttpRequest","open","onreadystatechange","readyState","status","JSON","parse","response","forEach","item","li","document","createElement","textContent","id","xxx","appendChild","send","getJSON","console","log","object","myName","name","getXML","dom","text","responseXML","getElementsByTagName","trim","getHTML","onload","div","innerHTML","body","onerror","getJS","script","getCSS","style","head","alert"],"mappings":";AAAA,IAAIA,EAAI,EACRC,QAAQC,QAAU,WACRC,IAAAA,EAAU,IAAIC,eACpBD,EAAQE,KAAK,MAAeL,QAAAA,OAAAA,EAAI,IAChCG,EAAQG,mBAAqB,WACE,IAAvBH,EAAQI,YAAuC,MAAnBJ,EAAQK,SACtBC,KAAKC,MAAMP,EAAQQ,UAE3BC,QAAQ,SAAAC,GACJC,IAAAA,EAAKC,SAASC,cAAc,MAClCF,EAAGG,YAAcJ,EAAKK,GACtBC,IAAIC,YAAYN,KAEpBd,GAAK,IAGbG,EAAQkB,QAGZC,QAAQpB,QAAU,WACRC,IAAAA,EAAU,IAAIC,eACpBD,EAAQE,KAAK,MAAO,WACpBF,EAAQG,mBAAqB,WACrBH,GAAuB,IAAvBA,EAAQI,YAAuC,MAAnBJ,EAAQK,OAAgB,CACpDe,QAAQC,IAAIrB,EAAQQ,UACdc,IAAAA,EAAShB,KAAKC,MAAMP,EAAQQ,UAClCe,OAAOT,YAAcQ,EAAOE,OAGpCxB,EAAQkB,QAGZO,OAAO1B,QAAU,WACPC,IAAAA,EAAU,IAAIC,eACpBD,EAAQE,KAAK,MAAO,UACpBF,EAAQG,mBAAqB,WACrBH,GAAuB,IAAvBA,EAAQI,YAAuC,MAAnBJ,EAAQK,OAAgB,CAE9CqB,IAEAC,EAFM3B,EAAQ4B,YAEHC,qBAAqB,WAAW,GAAGf,YACpDM,QAAQC,IAAIM,EAAKG,UAGzB9B,EAAQkB,QAGZa,QAAQhC,QAAU,WACRC,IAAAA,EAAU,IAAIC,eACpBD,EAAQE,KAAK,MAAO,WACpBF,EAAQgC,OAAS,WAEPC,IAAAA,EAAMrB,SAASC,cAAc,OAEnCoB,EAAIC,UAAYlC,EAAQQ,SAExBI,SAASuB,KAAKlB,YAAYgB,IAG9BjC,EAAQoC,QAAU,aAGlBpC,EAAQkB,QAGZmB,MAAMtC,QAAU,WACNC,IAAAA,EAAU,IAAIC,eACpBD,EAAQE,KAAK,MAAO,SACpBF,EAAQgC,OAAS,WAEPM,IAAAA,EAAS1B,SAASC,cAAc,UAEtCyB,EAAOJ,UAAYlC,EAAQQ,SAE3BI,SAASuB,KAAKlB,YAAYqB,IAE9BtC,EAAQoC,QAAU,WACdhB,QAAQC,IAAI,QAEhBrB,EAAQkB,QAGZqB,OAAOxC,QAAU,WACPC,IAAAA,EAAU,IAAIC,eACpBD,EAAQE,KAAK,MAAO,cACpBF,EAAQG,mBAAqB,WAErBH,GAAuB,IAAvBA,EAAQI,WACJJ,GAAAA,EAAQK,QAAU,KAAOL,EAAQK,OAAS,IAAK,CACzCmC,IAAAA,EAAQ5B,SAASC,cAAc,SACrC2B,EAAMN,UAAYlC,EAAQQ,SAC1BI,SAAS6B,KAAKxB,YAAYuB,QAE1BE,MAAM,YAIlB1C,EAAQkB","file":"main.0b62c62c.js","sourceRoot":"..\\public","sourcesContent":["let n = 1;\r\ngetPAGE.onclick = () => {\r\n    const request = new XMLHttpRequest()\r\n    request.open('GET', `/page${n + 1}`)\r\n    request.onreadystatechange = () => {\r\n        if (request.readyState === 4 && request.status === 200) {\r\n            const array = JSON.parse(request.response)//把JSON字符串变成数组\r\n            //对数组的每一项，插到ul后面\r\n            array.forEach(item => {//把每一项的名字叫item\r\n                const li = document.createElement('li');//创造一个li元素\r\n                li.textContent = item.id;//li的内容等于item的id\r\n                xxx.appendChild(li);//把li插到ul里面\r\n            });\r\n            n += 1;//每次运行结束，加1，跳转到下一页\r\n        }\r\n    }\r\n    request.send()\r\n};\r\n\r\ngetJSON.onclick = () => {\r\n    const request = new XMLHttpRequest()\r\n    request.open('GET', '/5.json')\r\n    request.onreadystatechange = () => {\r\n        if (request.readyState === 4 && request.status === 200) {\r\n            console.log(request.response)\r\n            const object = JSON.parse(request.response)//json.parse可以把符合JSON语法的字符串变成对应的对象，或者其他东西\r\n            myName.textContent = object.name//可以修改html里的内容，使用ajax\r\n        }\r\n    };\r\n    request.send()\r\n};\r\n\r\ngetXML.onclick = () => {\r\n    const request = new XMLHttpRequest()\r\n    request.open('GET', '/4.xml')\r\n    request.onreadystatechange = () => {\r\n        if (request.readyState === 4 && request.status === 200) {\r\n            //responseXML自动把信息变成document对象\r\n            const dom = request.responseXML\r\n            //通过dom的get API 找到warning标签，获取它的textContent（节点的文本内容），getElementsByTagName获取的是伪数组，使用下标获取单个元素\r\n            const text = dom.getElementsByTagName('warning')[0].textContent\r\n            console.log(text.trim())//trim()去掉字符串周围的回车空格\r\n        }\r\n    }\r\n    request.send()\r\n};\r\n\r\ngetHTML.onclick = () => {\r\n    const request = new XMLHttpRequest()\r\n    request.open('GET', '/3.html')\r\n    request.onload = () => {\r\n        //创建一个div\r\n        const div = document.createElement('div')\r\n        //填写div内容\r\n        div.innerHTML = request.response\r\n        //把div插到body里\r\n        document.body.appendChild(div)\r\n\r\n    }\r\n    request.onerror = () => {\r\n\r\n    }\r\n    request.send()\r\n}\r\n\r\ngetJS.onclick = () => {\r\n    const request = new XMLHttpRequest()\r\n    request.open('GET', '/2.js')\r\n    request.onload = () => {\r\n        //创建script标签\r\n        const script = document.createElement('script')\r\n        //填写script内容\r\n        script.innerHTML = request.response\r\n        //插到body里\r\n        document.body.appendChild(script)\r\n    };\r\n    request.onerror = () => {\r\n        console.log('失败了')\r\n    };\r\n    request.send()\r\n}\r\n\r\ngetCSS.onclick = () => {\r\n    const request = new XMLHttpRequest();\r\n    request.open('GET', '/style.css');\r\n    request.onreadystatechange = () => {\r\n        //下载完成但并不知道是成功2xx还是失败4xx\r\n        if (request.readyState === 4) {//如果request的readyState等于4，4是状态码，说明下载完成\r\n            if (request.status >= 200 && request.status < 300) {//请求的status，响应码是大于200而且小于300\r\n                const style = document.createElement('style')\r\n                style.innerHTML = request.response\r\n                document.head.appendChild(style)\r\n            } else {\r\n                alert('加载CSS失败')\r\n            }\r\n        }\r\n    };\r\n    request.send()\r\n}\r\n\r\n/*getCSS.onclick = () => {//按钮的点击事件等于一个函数\r\n    const request = new XMLHttpRequest();//创建一个XMLHttpRequest对象\r\n    request.open('GET', '/style.css');//调用它的open方法，第一个参数是请求（get（获取资源），post），第二个参数是url，获取的是谁，路径\r\n    request.onload = () => {//监听它的成功\r\n        //创建style标签\r\n        const style = document.createElement('style')\r\n        //填写style标签内容\r\n        style.innerHTML = request.response//response拿到请求的响应，style的内容等于请求的响应内容\r\n        //把style标签插入到head里\r\n        document.head.appendChild(style)\r\n    };\r\n    request.onerror = () => {//监听失败\r\n        console.log('失败了');\r\n    };\r\n    request.send();//发送请求\r\n}*/\r\n"]}